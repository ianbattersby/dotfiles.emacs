;; -*- mode: dotspacemacs -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `!distribution'. For now available distributions are `spacemacs-core'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. ~`/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/.spacemacs.layers" "~/code/thebb-spacemacs-layers")
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   `(
     ;; --------------------------------------------------------
     ;; Example of useful layers you may want to use right away
     ;; Uncomment a layer name and press C-c C-c to install it
     ;; --------------------------------------------------------
     (auto-completion :variables
                      auto-completion-return-key-behavior 'complete
                      auto-completion-tab-key-behavior 'cycle
                      ;;auto-completion-enable-help-tooltip t)
                      :disabled-for org)
     better-defaults
     emacs-lisp
     eyebrowse
     erlang
     fsharp
     git
     github
     go
     (haskell :variables haskell-enable-ghci-ng-support t)
     html
     javascript
     markdown
     (org :variables org-enable-github-support t)
     prodigy
     (ranger :variables ranger-show-preview t)
     ruby
     semantic
     (syntax-checking :variables syntax-checking-enable-by-default t)
     unimpaired
     version-control

     ;; platform conditional layers
     ,@(when (string= system-type "darwin")
         '(osx
           (shell :variables shell-default-shell 'ansi-term shell-default-term-shell "/bin/zsh")))

     ,@(when (string= system-type "gnu/linux")
         '((shell :variables shell-default-shell 'ansi-term shell-default-term-shell "/usr/bin/zsh")))

     ,@(unless (string= system-type "windows-nt")
         '(gtags
           (spell-checking :variables
                           spell-checking-enable-by-default nil)
           fasd))

     ;; custom layers
     (my-csharp :variables omnisharp-load-script "~/code/omnisharp-roslyn/scripts/Omnisharp")

     (theming :variables
                    theming-headings-inherit-from-default 'all
                    theming-headings-same-size 'all
                    theming-headings-bold 'all)
     )
   ;; List of additional packages that will be installed wihout being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(omnisharp)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
   ;; variable is `emacs' then the `holy-mode' is enabled at startup. 'hybrid'
   ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
   ;; unchanged.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progess in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner nil;;'official
   ;; t if you always want to see the changelog at startup
   dotspacemacs-always-show-changelog t
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents bookmarks projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(monokai
                         spacemacs-dark
                         spacemacs-light
                         solarized-light
                         solarized-dark
                         leuven
                         zenburn)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font `("Source Code Pro"
                               :size ,(if (string= system-type "darwin") 14 15)
                               :weight normal
                               :width normal
                               :powerline-scale 1.15)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil `Y' is remapped to `y$'. (default t)
   dotspacemacs-remap-Y-to-y$ t
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; Default value is `cache'.
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-save-file-location 'cache
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   ;; `find-contrib-file' (SPC f e c) are replaced.
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to miminimize the space it uses."
   dotspacemacs-helm-resize t
   ;; if non nil, the helm header is hidden when there is only one source.
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'.
   dotspacemacs-helm-position 'bottom
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Which-key delay in seconds. The Which-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are right, bottom and
   ;; right-then-bottom. Right-then-bottom tries to display the frame to the
   ;; right. If there is insufficient space, it displays it at the bottom.
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup (should-fullscreen-at-start)
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native t
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-line-numbers nil
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one).
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup 'changed
   )
)

(defun dotspacemacs/user-init ()
  "Initialization function for user. Called immediately following `dotspacemacs/init'."

  ;; Change the default title-format
  (setq frame-title-format
        '(buffer-file-name
          "%f"
          (dired-directory dired-directory "%b")))

  ;; size window according to displays available
  (unless (should-fullscreen-at-start)
    (set-frame-size-according-to-position 2 t))

  ;; keyboard
  (when (equal system-type 'darwin)
    (setq mac-command-modifier 'super)
    (setq mac-function-modifier 'hyper))

  ;; transparency by default for daemon mode
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (select-frame frame)
              (set-frame-parameter (selected-frame) 'alpha
                                   (list dotspacemacs-active-transparency
                                         dotspacemacs-inactive-transparency))))

  ;; disable tramp errors as they are way annoying
  (setq ad-redefinition-action 'accept)

  ;; projectile
  (setq projectile-tags-command "ctags --exclude=periphlib --exclude=build -Re -f \"%s\" %s")

  ;; evil
  (setq-default
   evil-escape-delay 0.2
   evil-shift-round nil)

  ;; whitespace mode
  (setq-default
    whitespace-style '(face tabs tab-mark newline-mark)
    whitespace-display-mappings
    '((newline-mark 10 [172 10])
      (tab-mark 9 [9655 9])))

  ;; Smartparens
  (setq-default
    sp-highlight-pair-overlay nil
    sp-highlight-wrap-overlay nil
    sp-highlight-wrap-tag-overlay nil)

  ;; flycheck
  (setq-default
    flycheck-check-syntax-automatically '(save mode-enabled))

  ;; Avy
  (setq-default
    avy-all-windows 'all-frames)

  ;; Semantic fucks up scrolling
  (with-eval-after-load 'semantic
    (bb/remove-from-list semantic-submode-list 'global-semantic-stickyfunc-mode))

  ;; Org
  (setq-default
    org-tags-column -80
    org-clock-into-drawer "LOGBOOK"
    org-log-into-drawer "LOGBOOK"
    org-startup-align-all-tables t
    org-footnote-auto-adjust t
    org-footnote-auto-label 'confirm
    org-M-RET-may-split-line
     '((headline . nil) (item . nil) (table . nil))
    org-directory "~/Documents/org"
    org-default-notes-file "~/Documents/org/capture.org"
    org-catch-invisible-edits 'show-and-error
    org-list-demote-modify-bullet '(("-" . "*")
                                    ("*" . "+")
                                    ("+" . "-"))
    org-list-allow-alphabetical t
    org-capture-templates
     '(("t" "Tasks")
     ("tg" "General" entry (file+headline "" "Tasks")
      "* TODO %?\n%i\n%T"
      :empty-lines 1)
     ("tl" "Location" entry (file+headline "" "Tasks")
      "* TODO %?\n%i\n%T\n%a"
      :empty-lines 1)
     ("n" "Notes")
     ("ng" "General" entry (file+headline "" "Notes")
      "* %?\n%i\n%T"
      :empty-lines 1)
     ("nl" "Location" entry (file+headline "" "Notes")
      "* %?\n%i\n%T\n%a"
      :empty-lines 1)))

  ;; Theme modifications
  (setq-default
   theming-modifications
   '((monokai
      ;; Font locking
      (font-lock-comment-face :slant italic)
      (font-lock-string-face :slant italic)
      (font-lock-doc-face :slant italic)
      (font-lock-keyword-face :weight bold)
      ;;(font-lock-builtin-face :foreground "#ff9eb8")
      (font-lock-warning-face :underline nil)
      (web-mode-html-attr-value-face
       :inherit font-lock-string-face :foreground nil)
      (web-mode-html-attr-name-face
       :inherit font-lock-variable-name-face :foreground nil)
      (web-mode-html-tag-face
       :inherit font-lock-builtin-face :foreground nil :weight bold)
      (web-mode-html-tag-bracket-face
       :inherit web-mode-html-tag-face :foreground nil)
      (web-mode-comment-face
       :inherit font-lock-comment-face :foreground nil)

      ;; Modeline
      (mode-line :box (:color "#999999" :line-width 1 :style released-button))
      (powerline-active1 :box (:color "#999999" :line-width 1 :style released-button)
                         :background "#5a5a5a")
      (powerline-active2 :box (:color "#999999" :line-width 1 :style released-button))
      (mode-line-inactive :box (:color "#666666" :line-width 1 :style released-button))
      (powerline-inactive1 :box (:color "#666666" :line-width 1 :style released-button))
      (powerline-inactive2 :box (:color "#666666" :line-width 1 :style released-button))
      (helm-prefarg :foreground "PaleGreen")

      ;; Flycheck
      (flycheck-fringe-error :background nil)
      (flycheck-fringe-warning :background nil)
      (flycheck-fringe-info :background nil)

      ;; Other
      (company-tooltip-annotation
       :foreground "#ff9eb8" :background "#49483e")
      (erc-timestamp-face
       :inherit font-lock-comment-face :foreground nil)
      (evil-search-highlight-persist-highlight-face
       :background "#fc5fef" :foreground "#000000")
      (region :background "#998f84")
      (term :foreground nil :background nil))))

  ;; haskell
  (add-to-list 'exec-path "~/.cabal/bin/")

  ;; golang
  (if (string= system-type "windows-nt")
    (add-to-list 'exec-path "d:\code\go\bin") 
    (add-to-list 'exec-path "~/go/bin"))

  ;; spacemacs
  ;;(setq dotspacemacs-verbose-loading t)
)

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  ;; size window according to displays available
  (advice-add 'spacemacs/toggle-frame-fullscreen :after
              (lambda()
                (if (not (frame-parameter nil 'fullscreen))
                    (progn
                      (interactive)
                      (set-frame-size-according-to-position 2)))))

  (add-hook 'prog-mode-hook #'linum-mode)
  (add-hook 'prog-mode-hook #'linum-relative-toggle)
  (add-hook 'emacs-lisp-mode-hook #'linum-relative-toggle)
  (add-hook 'hack-local-variables-hook (lambda () (setq truncate-lines t)))
  (add-hook 'makefile-mode-hook 'whitespace-mode)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'dired-mode-hook 'deer)
  (add-hook 'markdown-mode #'spacemacs/toggle-spelling-checking-on)
  (add-hook 'prog-mode-hook 'spacemacs/highlight-TODO-words)

  ;; utility functions
  (defun bb/define-key (keymap &rest bindings)
    (declare (indent 1))
    (while bindings
      (define-key keymap (pop bindings) (pop bindings))))

  (defmacro bb/remove-from-list (list-var element)
    `(setq ,list-var (remove ,element ,list-var)))

  ;; settings
  (setq-default
    tab-width 8
    evil-move-beyond-eol nil
    helm-echo-input-in-header-line nil
    powerline-default-separator 'alternate

    auto-mode-alist
    (append '(("\\.xml\\'" . web-mode)
              ("\\.xinp\\'" . web-mode)
              ("\\.C\\'" . c++-mode)
              ("\\.h\\'" . c++-mode))
            auto-mode-alist))

  ;; keybindings
  (bb/define-key evil-normal-state-map
                 "\\" 'evil-repeat-find-char-reverse
                 "[s" (lambda (n) (interactive "p") (dotimes (c n nil) (insert " ")))
                 "]s" (lambda (n) (interactive "p")
                        (forward-char) (dotimes (c n nil) (insert " ")) (backward-char (1+ n))))
  (bb/define-key evil-insert-state-map
    (kbd "C-e") 'move-end-of-line
    (kbd "C-a") 'move-beginning-of-line)
  (bb/define-key evil-motion-state-map
                 (kbd "<backspace>") 'helm-M-x)
  (with-eval-after-load 'helm-M-x
    (bb/define-key helm-map
      (kbd "C-S-q") 'ace-jump-helm-line-execute-action))
  (evil-leader/set-key
    "ec" 'flycheck-clear
    "op" 'avy-goto-line
    "os" 'just-one-space
    "ot" 'helm-etags-select
    "ov" 'evilmi-select-items
    "oh" (defun bb/highlight ()
           (interactive)
           (hlt-highlight-region)
           (keyboard-quit))
    "oH" (defun bb/unhighlight ()
           (interactive)
           (hlt-unhighlight-region)
           (keyboard-quit)))
  (bb/define-key company-active-map
    (kbd "C-w") 'evil-delete-backward-word)

  ;; transparency
  (set-frame-parameter (selected-frame) 'alpha
                       (list dotspacemacs-active-transparency
                             dotspacemacs-inactive-transparency))

  ;; Disable smartparens highlighting
  ;;(with-eval-after-load 'smartparens
  ;;  (show-smartparens-global-mode -1))

  ;; Some fixes for comint-style buffers
  (dolist (mode '(erc-mode comint-mode term-mode eshell-mode inferior-emacs-lisp-mode))
    (bb/remove-from-list evil-insert-state-modes mode))

  (let ((comint-hooks '(eshell-mode-hook
                        term-mode-hook
                        erc-mode-hook
                        messages-buffer-mode-hook
                        inferior-emacs-lisp-mode-hook
                        inferior-python-mode-hook)))
    (spacemacs/add-to-hooks (defun bb/no-hl-line-mode ()
                              (setq-local global-hl-line-mode nil))
                            comint-hooks)
    (spacemacs/add-to-hooks (defun bb/no-scroll-margin ()
                              (setq-local scroll-margin 0))
                            comint-hooks))
  (add-hook 'inferior-emacs-lisp-mode-hook 'smartparens-mode)

  ;; git
  (setq magit-repo-dirs '("~/code/"))
  (setq diff-hl-side 'left)
  (setq diff-hl-draw-borders t)

  ;; ranger
  (setq ranger-cleanup-on-disable t)
  (setq ranger-cleanup-eagerly t)
  (setq ranger-parent-depth 2)
  (setq ranger-max-preview-size 1)

  ;; syntax-checking
  ;; (add-hook 'evil-insert-state-exit-hook (lambda() (interactive) (spacemacs/toggle-syntax-checking)))
  ;; (add-hook 'evil-normal-state-exit-hook (lambda() (interactive) (spacemacs/toggle-syntax-checking)))

  ;; omnisharp
  (global-set-key (kbd "s-<return>") 'inferior-fsharp-eval-region)

  ;; text size
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  ;; frame movement
  (evil-leader/set-key
    "wW1" '(lambda() (interactive) (set-frame-size-according-to-position 1))
    "wW2" '(lambda() (interactive) (set-frame-size-according-to-position 2))
    "wW3" '(lambda() (interactive) (set-frame-size-according-to-position 3)))

  ;; window movement
  (global-set-key (kbd "s-h") 'windmove-left)
  (global-set-key (kbd "s-l") 'windmove-right)
  (global-set-key (kbd "s-j") 'windmove-down)
  (global-set-key (kbd "s-k") 'windmove-up)
  (global-set-key (kbd "M-<tab>") 'spacemacs//workspaces-eyebrowse-next-window-config-n)
  (global-set-key (kbd "s-1") 'eyebrowse-switch-to-window-config-1)
  (global-set-key (kbd "s-2") 'eyebrowse-switch-to-window-config-2)
  (global-set-key (kbd "s-3") 'eyebrowse-switch-to-window-config-3)
  (global-set-key (kbd "s-4") 'eyebrowse-switch-to-window-config-4)
  (global-set-key (kbd "s-5") 'eyebrowse-switch-to-window-config-5)
  (global-set-key (kbd "s-6") 'eyebrowse-switch-to-window-config-6)
  (global-set-key (kbd "s-7") 'eyebrowse-switch-to-window-config-7)
  (global-set-key (kbd "s-8") 'eyebrowse-switch-to-window-config-8)
  (global-set-key (kbd "s-9") 'eyebrowse-switch-to-window-config-9)
  (global-set-key (kbd "H-<backspace>") 'delete-char)
  (evil-define-key 'insert global-map (kbd "§") (lambda() (interactive) (insert "#")))

  ;; company mode
  (setq company-idle-delay 0.03)
  (setq company-minimum-prefix-length 1)
  (setq company-require-match 'nil)
  (setq company-show-numbers 't) 

  ;; use flex matching for company
  (setq omnisharp-company-match-type 'company-match-flx)
  (setq gc-cons-threshold 20000000)

  ;; projectile
  (advice-add 'projectile--tags :around #'ao/expand-completion-table)
)

(defun ao/expand-completion-table
    (orig-fun &rest args)
  "Extract all symbols from COMPLETION-TABLE before calling projectile--tags."
  (let ((completion-table (all-completions "" (car args))))
    (funcall orig-fun completion-table)))

(defun set-frame-size-according-to-position (pos &optional onstartup)
  "Move frame according to screen position"
 (interactive)
 (if window-system
  (let* (
         (default-margin 30)
         (char-width (if onstartup 8 (frame-char-width (selected-frame))))
         (char-height (if onstartup 18 (frame-char-height (selected-frame))))
         (displays (sort (display-monitor-attributes-list) (lambda(a b) (let ((a-left (nth 1 (assq 'geometry a))) (b-left (nth 1 (assq 'geometry b)))) (> b-left a-left)))))
         (max-pos (if (> pos (list-length displays)) (list-length displays) pos))
         (real-pos (- max-pos 1))
         (geometry (assq 'geometry (nth real-pos displays)))
         (display-width (nth 3 geometry))
         (display-height (nth 4 geometry))
         (left-pos (nth 1 geometry))
         (top-pos (nth 2 geometry))
         (bottom-pos (* -1 display-height))
         (left-pos-margin (+ default-margin left-pos))
         (top-pos-margin (+ default-margin top-pos))
         (bottom-pos-margin (+  default-margin top-pos bottom-pos))
         (column-width-margin (/ (- display-width (* default-margin 2)) char-width))
         (line-height-margin (/ (- display-height (* default-margin 2)) char-height)))

    (if (not onstartup)
        (progn
          (princ 'Re\-sizing\ according\ to\ displays)
          (set-frame-position (selected-frame) left-pos-margin bottom-pos-margin)
          (set-frame-height (selected-frame) line-height-margin)
          (set-frame-width (selected-frame) column-width-margin))
      (progn
        (princ 'Setting\ default\ frame\ sizes)

        (if (< top-pos-margin 0)
            (add-to-list 'default-frame-alist `(top + ,top-pos-margin))
          (add-to-list 'default-frame-alist `(top . ,top-pos-margin)))

        (add-to-list 'default-frame-alist `(left . ,left-pos-margin))

        (add-to-list 'default-frame-alist (cons 'height line-height-margin))
        (add-to-list 'default-frame-alist (cons 'width column-width-margin)))))))

(defun should-fullscreen-at-start()
  (not (or (string= system-type "windows-nt") (not (window-system)) (> (list-length (display-monitor-attributes-list)) 1))))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
