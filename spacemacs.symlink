;; -*- mode: dotspacemacs -*-

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-configuration-layer-path '("~/.spacemacs.layers")
   dotspacemacs-configuration-layers
   `(
     (auto-completion :variables
                      auto-completion-return-key-behavior 'complete
                      auto-completion-tab-key-behavior 'cycle
                      ;;auto-completion-enable-help-tooltip t
                      :disabled-for org)
     better-defaults
     emacs-lisp
     eyebrowse
     erlang
     fsharp
     git
     github
     go
     (haskell :variables haskell-enable-ghci-ng-support t)
     html
     (javascript :variables
                 js2-basic-offset 2
                 js-indent-level 2)
     markdown
     (org :variables org-enable-github-support t)
     prodigy
     (ranger :variables ranger-show-preview t)
     ruby
     semantic
     (syntax-checking :variables syntax-checking-enable-by-default t)
     unimpaired
     version-control
     yaml
     (typography :variables typography-enable-typographic-editing t)

     ;; platform conditional layers
     ,@(when (string= system-type "darwin")
         '(osx
           (shell :variables shell-default-shell 'ansi-term shell-default-term-shell "/bin/zsh")))

     ,@(when (string= system-type "gnu/linux")
         '((shell :variables shell-default-shell 'ansi-term shell-default-term-shell "/usr/bin/zsh")))

     ,@(unless (string= system-type "windows-nt")
         '(gtags
           (spell-checking :variables
                           spell-checking-enable-by-default nil)
           fasd))

     ;; custom layers
     (my-csharp :variables omnisharp-load-script "~/code/omnisharp-roslyn/scripts/Omnisharp")

     (theming :variables
                    theming-headings-inherit-from-default 'all
                    theming-headings-same-size 'all
                    theming-headings-bold 'all)
     )

   dotspacemacs-additional-packages '()
   dotspacemacs-excluded-packages '(omnisharp)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  (setq-default
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner nil
   dotspacemacs-always-show-changelog t
   dotspacemacs-startup-lists '(bookmarks projects recents)
   dotspacemacs-startup-recent-list-size 5
   dotspacemacs-themes '(monokai
                         spacemacs-dark
                         spacemacs-light
                         solarized-light
                         solarized-dark
                         leuven
                         zenburn)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font `("Source Code Pro"
                               :size ,(if (string= system-type "darwin") 14 15)
                               :weight normal
                               :width normal
                               :powerline-scale 1.15)
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-command-key ":"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-default-layout-name "Home"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 10
   dotspacemacs-use-ido nil
   dotspacemacs-helm-resize t
   dotspacemacs-helm-no-header t
   dotspacemacs-helm-position 'bottom
   dotspacemacs-enable-paste-micro-state t
   dotspacemacs-which-key-delay 1.0
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup (should-fullscreen-at-start)
   dotspacemacs-fullscreen-use-non-native t
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-mode-line-unicode-symbols nil
   dotspacemacs-smooth-scrolling t
   dotspacemacs-line-numbers nil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup 'changed
   )
)

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put any
user code."

  ;; Change the default title-format
  (setq frame-title-format
        '(buffer-file-name
          "%f"
          (dired-directory dired-directory "%b")))

  ;; size window according to displays available
  (unless (should-fullscreen-at-start)
    (set-frame-size-according-to-position 2 t))

  ;; keyboard
  (when (equal system-type 'darwin)
    (setq mac-command-modifier 'super)
    (setq mac-function-modifier 'hyper))

  ;; transparency by default for daemon mode
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (select-frame frame)
              (set-frame-parameter (selected-frame) 'alpha
                                   (list dotspacemacs-active-transparency
                                         dotspacemacs-inactive-transparency))))

  ;; disable tramp errors as they are way annoying
  (setq ad-redefinition-action 'accept)

  ;; projectile
  (setq projectile-tags-command "ctags --exclude=periphlib --exclude=build -Re -f \"%s\" %s")

  ;; evil
  (setq-default
   evil-escape-delay 0.2
   evil-shift-round nil)

  ;; whitespace mode
  (setq-default
    whitespace-style '(face tabs tab-mark newline-mark)
    whitespace-display-mappings
    '((newline-mark 10 [172 10])
      (tab-mark 9 [9655 9])))

  ;; Smartparens
  (setq-default
    sp-highlight-pair-overlay nil
    sp-highlight-wrap-overlay nil
    sp-highlight-wrap-tag-overlay nil)

  ;; flycheck
  (setq-default
    flycheck-check-syntax-automatically '(save mode-enabled))

  ;; Avy
  (setq-default
    avy-all-windows 'all-frames)

  ;; Semantic fucks up scrolling
  (with-eval-after-load 'semantic
    (bb/remove-from-list semantic-submode-list 'global-semantic-stickyfunc-mode))

  ;; Org
  (setq-default
    org-tags-column -80
    org-clock-into-drawer "LOGBOOK"
    org-log-into-drawer "LOGBOOK"
    org-startup-align-all-tables t
    org-footnote-auto-adjust t
    org-footnote-auto-label 'confirm
    org-M-RET-may-split-line
     '((headline . nil) (item . nil) (table . nil))
    org-directory "~/Documents/org"
    org-default-notes-file "~/Documents/org/capture.org"
    org-catch-invisible-edits 'show-and-error
    org-list-demote-modify-bullet '(("-" . "*")
                                    ("*" . "+")
                                    ("+" . "-"))
    org-list-allow-alphabetical t
    org-capture-templates
     '(("t" "Tasks")
     ("tg" "General" entry (file+headline "" "Tasks")
      "* TODO %?\n%i\n%T"
      :empty-lines 1)
     ("tl" "Location" entry (file+headline "" "Tasks")
      "* TODO %?\n%i\n%T\n%a"
      :empty-lines 1)
     ("n" "Notes")
     ("ng" "General" entry (file+headline "" "Notes")
      "* %?\n%i\n%T"
      :empty-lines 1)
     ("nl" "Location" entry (file+headline "" "Notes")
      "* %?\n%i\n%T\n%a"
      :empty-lines 1)))

  ;; Theme modifications
  (setq-default
   theming-modifications
   '((monokai
      ;; Font locking
      (font-lock-comment-face :slant italic)
      (font-lock-string-face :slant italic)
      (font-lock-doc-face :slant italic)
      (font-lock-keyword-face :weight bold)
      ;;(font-lock-builtin-face :foreground "#ff9eb8")
      (font-lock-warning-face :underline nil)
      (web-mode-html-attr-value-face
       :inherit font-lock-string-face :foreground nil)
      (web-mode-html-attr-name-face
       :inherit font-lock-variable-name-face :foreground nil)
      (web-mode-html-tag-face
       :inherit font-lock-builtin-face :foreground nil :weight bold)
      (web-mode-html-tag-bracket-face
       :inherit web-mode-html-tag-face :foreground nil)
      (web-mode-comment-face
       :inherit font-lock-comment-face :foreground nil)

      ;; Modeline
      (mode-line :box (:color "#999999" :line-width 1 :style released-button))
      (powerline-active1 :box (:color "#999999" :line-width 1 :style released-button)
                         :background "#5a5a5a")
      (powerline-active2 :box (:color "#999999" :line-width 1 :style released-button))
      (mode-line-inactive :box (:color "#666666" :line-width 1 :style released-button))
      (powerline-inactive1 :box (:color "#666666" :line-width 1 :style released-button))
      (powerline-inactive2 :box (:color "#666666" :line-width 1 :style released-button))
      (helm-prefarg :foreground "PaleGreen")

      ;; Flycheck
      (flycheck-fringe-error :background nil)
      (flycheck-fringe-warning :background nil)
      (flycheck-fringe-info :background nil)

      ;; Other
      (company-tooltip-annotation
       :foreground "#ff9eb8" :background "#49483e")
      (erc-timestamp-face
       :inherit font-lock-comment-face :foreground nil)
      (evil-search-highlight-persist-highlight-face
       :background "#fc5fef" :foreground "#000000")
      (region :background "#998f84")
      (term :foreground nil :background nil))))

  ;; haskell
  (add-to-list 'exec-path "~/.cabal/bin/")

  ;; golang
  (if (string= system-type "windows-nt")
    (add-to-list 'exec-path "d:\code\go\bin") 
    (add-to-list 'exec-path "~/go/bin"))

  ;; spacemacs
  ;;(setq dotspacemacs-verbose-loading t)
)

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
 This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."

  ;; size window according to displays available
  (advice-add 'spacemacs/toggle-frame-fullscreen :after
              (lambda()
                (if (not (frame-parameter nil 'fullscreen))
                    (progn
                      (interactive)
                      (set-frame-size-according-to-position 2)))))

  (add-hook 'prog-mode-hook #'linum-mode)
  (add-hook 'prog-mode-hook #'linum-relative-toggle)
  (add-hook 'emacs-lisp-mode-hook #'linum-relative-toggle)
  (add-hook 'hack-local-variables-hook (lambda () (setq truncate-lines t)))
  (add-hook 'makefile-mode-hook 'whitespace-mode)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'dired-mode-hook 'deer)
  (add-hook 'markdown-mode #'spacemacs/toggle-spelling-checking-on)
  (add-hook 'prog-mode-hook 'spacemacs/highlight-TODO-words)

  ;; utility functions
  (defun bb/define-key (keymap &rest bindings)
    (declare (indent 1))
    (while bindings
      (define-key keymap (pop bindings) (pop bindings))))

  (defmacro bb/remove-from-list (list-var element)
    `(setq ,list-var (remove ,element ,list-var)))

  ;; settings
  (setq-default
    tab-width 8
    evil-move-beyond-eol nil
    helm-echo-input-in-header-line nil
    powerline-default-separator 'alternate

    auto-mode-alist
    (append '(("\\.xml\\'" . web-mode)
              ("\\.xinp\\'" . web-mode)
              ("\\.C\\'" . c++-mode)
              ("\\.h\\'" . c++-mode))
            auto-mode-alist))

  ;; keybindings
  (bb/define-key evil-normal-state-map
                 "\\" 'evil-repeat-find-char-reverse
                 "[s" (lambda (n) (interactive "p") (dotimes (c n nil) (insert " ")))
                 "]s" (lambda (n) (interactive "p")
                        (forward-char) (dotimes (c n nil) (insert " ")) (backward-char (1+ n))))
  (bb/define-key evil-insert-state-map
    (kbd "C-e") 'move-end-of-line
    (kbd "C-a") 'move-beginning-of-line)
  (bb/define-key evil-motion-state-map
                 (kbd "<backspace>") 'helm-M-x)
  (with-eval-after-load 'helm-M-x
    (bb/define-key helm-map
      (kbd "C-S-q") 'ace-jump-helm-line-execute-action))
  (evil-leader/set-key
    "op" 'avy-goto-line
    "os" 'just-one-space
    "ot" 'helm-etags-select
    "ov" 'evilmi-select-items
    "oh" (defun bb/highlight ()
           (interactive)
           (hlt-highlight-region)
           (keyboard-quit))
    "oH" (defun bb/unhighlight ()
           (interactive)
           (hlt-unhighlight-region)
           (keyboard-quit)))
  (bb/define-key company-active-map
    (kbd "C-w") 'evil-delete-backward-word)

  ;; transparency
  (set-frame-parameter (selected-frame) 'alpha
                       (list dotspacemacs-active-transparency
                             dotspacemacs-inactive-transparency))

  ;; Text objects
  (spacemacs|define-text-object "/" "slash" "/" "/")
  (spacemacs|define-text-object "_" "underscore" "_" "_")
  (spacemacs|define-text-object "~" "tilde" "~" "~")
  (spacemacs|define-text-object "=" "equal" "=" "=")

  ;; Diminish
  (when (eq 'hybrid dotspacemacs-editing-style)
    (diminish 'hybrid-mode))
  (with-eval-after-load 'emoji-cheat-sheet-plus
    (diminish 'emoji-cheat-sheet-plus-display-mode))
  (unless (spacemacs/system-is-mswindows)
    (with-eval-after-load 'helm-gtags
      (diminish 'helm-gtags-mode)))

  ;; Disable smartparens highlighting
  ;;(with-eval-after-load 'smartparens
  ;;  (show-smartparens-global-mode -1))

  ;; Some fixes for comint-style buffers
  (dolist (mode '(erc-mode comint-mode term-mode eshell-mode inferior-emacs-lisp-mode))
    (bb/remove-from-list evil-insert-state-modes mode))

  (let ((comint-hooks '(eshell-mode-hook
                        term-mode-hook
                        erc-mode-hook
                        messages-buffer-mode-hook
                        inferior-emacs-lisp-mode-hook
                        inferior-python-mode-hook)))
    (spacemacs/add-to-hooks (defun bb/no-hl-line-mode ()
                              (setq-local global-hl-line-mode nil))
                            comint-hooks)
    (spacemacs/add-to-hooks (defun bb/no-scroll-margin ()
                              (setq-local scroll-margin 0))
                            comint-hooks))
  (add-hook 'inferior-emacs-lisp-mode-hook 'smartparens-mode)

  ;; git
  (setq magit-repo-dirs '("~/code/"))
  (setq diff-hl-side 'left)
  (setq diff-hl-draw-borders t)

  ;; ranger
  (setq ranger-cleanup-on-disable t)
  (setq ranger-cleanup-eagerly t)
  (setq ranger-parent-depth 2)
  (setq ranger-max-preview-size 1)

  ;; syntax-checking
  ;; (add-hook 'evil-insert-state-exit-hook (lambda() (interactive) (spacemacs/toggle-syntax-checking)))
  ;; (add-hook 'evil-normal-state-exit-hook (lambda() (interactive) (spacemacs/toggle-syntax-checking)))

  ;; omnisharp
  (global-set-key (kbd "s-<return>") 'inferior-fsharp-eval-region)

  ;; text size
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  ;; frame movement
  (evil-leader/set-key
    "wW1" '(lambda() (interactive) (set-frame-size-according-to-position 1))
    "wW2" '(lambda() (interactive) (set-frame-size-according-to-position 2))
    "wW3" '(lambda() (interactive) (set-frame-size-according-to-position 3)))

  ;; window movement
  (global-set-key (kbd "s-h") 'windmove-left)
  (global-set-key (kbd "s-l") 'windmove-right)
  (global-set-key (kbd "s-j") 'windmove-down)
  (global-set-key (kbd "s-k") 'windmove-up)
  (global-set-key (kbd "M-<tab>") 'spacemacs//workspaces-eyebrowse-next-window-config-n)
  (global-set-key (kbd "s-1") 'eyebrowse-switch-to-window-config-1)
  (global-set-key (kbd "s-2") 'eyebrowse-switch-to-window-config-2)
  (global-set-key (kbd "s-3") 'eyebrowse-switch-to-window-config-3)
  (global-set-key (kbd "s-4") 'eyebrowse-switch-to-window-config-4)
  (global-set-key (kbd "s-5") 'eyebrowse-switch-to-window-config-5)
  (global-set-key (kbd "s-6") 'eyebrowse-switch-to-window-config-6)
  (global-set-key (kbd "s-7") 'eyebrowse-switch-to-window-config-7)
  (global-set-key (kbd "s-8") 'eyebrowse-switch-to-window-config-8)
  (global-set-key (kbd "s-9") 'eyebrowse-switch-to-window-config-9)
  (global-set-key (kbd "H-<backspace>") 'delete-char)
  (evil-define-key 'insert global-map (kbd "§") (lambda() (interactive) (insert "#")))

  ;; company mode
  (setq company-idle-delay 0.03)
  (setq company-minimum-prefix-length 1)
  (setq company-require-match 'nil)
  (setq company-show-numbers 't) 

  ;; use flex matching for company
  (setq omnisharp-company-match-type 'company-match-flx)
  (setq gc-cons-threshold 20000000)

  ;; projectile
  (advice-add 'projectile--tags :around #'ao/expand-completion-table)
)

(defun ao/expand-completion-table
    (orig-fun &rest args)
  "Extract all symbols from COMPLETION-TABLE before calling projectile--tags."
  (let ((completion-table (all-completions "" (car args))))
    (funcall orig-fun completion-table)))

(defun set-frame-size-according-to-position (pos &optional onstartup)
  "Move frame according to screen position"
 (interactive)
 (if window-system
  (let* (
         (default-margin 30)
         (char-width (if onstartup 8 (frame-char-width (selected-frame))))
         (char-height (if onstartup 18 (frame-char-height (selected-frame))))
         (displays (sort (display-monitor-attributes-list) (lambda(a b) (let ((a-left (nth 1 (assq 'geometry a))) (b-left (nth 1 (assq 'geometry b)))) (> b-left a-left)))))
         (max-pos (if (> pos (list-length displays)) (list-length displays) pos))
         (real-pos (- max-pos 1))
         (geometry (assq 'geometry (nth real-pos displays)))
         (display-width (nth 3 geometry))
         (display-height (nth 4 geometry))
         (left-pos (nth 1 geometry))
         (top-pos (nth 2 geometry))
         (bottom-pos (* -1 display-height))
         (left-pos-margin (+ default-margin left-pos))
         (top-pos-margin (+ default-margin top-pos))
         (bottom-pos-margin (+  default-margin top-pos bottom-pos))
         (column-width-margin (/ (- display-width (* default-margin 2)) char-width))
         (line-height-margin (/ (- display-height (* default-margin 2)) char-height)))

    (if (not onstartup)
        (progn
          (princ 'Re\-sizing\ according\ to\ displays)

          (if (> top-pos-margin 0)
              (set-frame-position (selected-frame) left-pos-margin top-pos-margin)
            (progn
              (set-frame-position (selected-frame) left-pos-margin 0)
              (set-frame-position (selected-frame) left-pos-margin bottom-pos-margin)))

          (set-frame-height (selected-frame) line-height-margin)
          (set-frame-width (selected-frame) column-width-margin))
      (progn
        (princ 'Setting\ default\ frame\ sizes)

        (if (< top-pos-margin 0)
            (add-to-list 'default-frame-alist `(top + ,top-pos-margin))
          (add-to-list 'default-frame-alist `(top . ,top-pos-margin)))

        (add-to-list 'default-frame-alist `(left . ,left-pos-margin))

        (add-to-list 'default-frame-alist (cons 'height line-height-margin))
        (add-to-list 'default-frame-alist (cons 'width column-width-margin)))))))

(defun should-fullscreen-at-start()
  (not (or (string= system-type "windows-nt") (not (window-system)) (> (list-length (display-monitor-attributes-list)) 1))))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
